generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou mysql/sqlite selon ton cas
  url      = env("DATABASE_URL")
}

model User {
  id             Int                 @id @default(autoincrement())
  emoProfileId   Int                 @unique
  emoProfile     UserEmotionProfile  @relation(fields: [emoProfileId], references: [id])
  name           String
  first_name     String
  passwordHash  String
  email          String             @unique
  phone_number   String?

  @@map("User")
}

model UserEmotionProfile {
  id        Int            @id @default(autoincrement())
  user      User?          // Must be optional for 1:1 back-reference
  emotions  UserEmotion[]
  sessions  Session[]

  @@map("UserEmotionProfile")
}

model UserEmotion {
  id                      Int                   @id @default(autoincrement())
  userEmotionProfile      UserEmotionProfile    @relation(fields: [userEmotionProfileId], references: [id])
  userEmotionProfileId    Int
  emotion                 Emotion               @relation(fields: [emotionId], references: [id])
  emotionId               Int
  customGenreRatings      UserGenrePreference[]

  @@map("UserEmotion")
}

model UserGenrePreference {
  id             Int        @id @default(autoincrement())
  genre          Genre      @relation(fields: [genreId], references: [id])
  genreId        Int
  userEmotion    UserEmotion @relation(fields: [userEmotionId], references: [id])
  userEmotionId  Int
  rating         Int
  bpm            Int
  speechiness    Int
  energy         Int

  @@map("UserGenrePreference")
}

model Genre {
  id        Int                    @id @default(autoincrement())
  name      String
  icon_url  String
  tracks    Track[]
  ratings   UserGenrePreference[]

  @@map("Genre")
}

model Emotion {
  id           Int        @id @default(autoincrement())
  name         String
  icon_url     String
  userEmotions UserEmotion[]
  fromSessions Session[] @relation("FromEmotion")
  toSessions   Session[] @relation("ToEmotion")

  @@map("Emotion")
}

model Track {
  id          Int           @id @default(autoincrement())
  name        String
  length      Int
  track_href  String
  bpm         Int
  speechiness Int
  energy      Int
  genre       Genre         @relation(fields: [genreId], references: [id])
  genreId     Int
  sessionTracks SessionTrack[]

  @@map("Track")
}

model Session {
  id                      Int             @id @default(autoincrement())
  duration                Int
  userEmotionProfile      UserEmotionProfile @relation(fields: [userEmotionProfileId], references: [id])
  userEmotionProfileId    Int
  fromEmotion             Emotion         @relation("FromEmotion", fields: [fromEmotionId], references: [id])
  fromEmotionId           Int
  toEmotion               Emotion         @relation("ToEmotion", fields: [toEmotionId], references: [id])
  toEmotionId             Int
  phases                  SessionPhase[]

  @@map("Session")
}

model SessionPhase {
  id         Int            @id @default(autoincrement())
  session    Session        @relation(fields: [sessionId], references: [id])
  sessionId  Int
  name       String
  order_index Int
  fromBpm Int
  toBpm Int
  fromSpeechiness Int
  toSpeechiness Int
  fromEnergy Int
  toEnergy Int
  tracks     SessionTrack[]

  @@map("SessionPhase")
}

model SessionTrack {
  sessionPhase  SessionPhase @relation(fields: [sessionPhaseId], references: [id])
  sessionPhaseId Int
  track          Track        @relation(fields: [trackId], references: [id])
  trackId        Int

  @@id([sessionPhaseId, trackId])
  @@map("SessionTrack")
}
