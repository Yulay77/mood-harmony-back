// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                 @id @default(autoincrement())
  EmoProfileId   string                 @unique
  name           String
  firstName     String
  passwordHash   String
  email          String
  phoneNumber    String

  emotionProfile UserEmotionProfile   @relation(fields: [EmoProfileId], references: [id])
  sessions       Session[]
}

model UserEmotionProfile {
  id       Int           @id @default(autoincrement())
  userId   Int
  user     User?
  emotions UserEmotion[]
}

model UserEmotion {
  id                    Int                     @id @default(autoincrement())
  userEmotionProfileId  string
  emotionId             string
  genres                Genre[]

  profile   UserEmotionProfile @relation(fields: [userEmotionProfileId], references: [id])
  emotion   Emotion            @relation(fields: [emotionId], references: [id])
  genreRates UserCustomGenreRate[]
}

model UserCustomGenreRate {
  id            Int         @id @default(autoincrement())
  genreId       string
  userEmotionId string
  rating        Int
  bpm           Int
  speechiness   Int
  energy        Int

  genre       Genre       @relation(fields: [genreId], references: [id])
  userEmotion UserEmotion @relation(fields: [userEmotionId], references: [id])
}

model Genre {
  id       Int     @id @default(autoincrement())
  name     String
  iconUrl  String

  tracks   Track[]
  ratings  UserCustomGenreRate[]
}

model Emotion {
  id       Int     @id @default(autoincrement())
  name     String
  iconUrl  String

  userEmotions    UserEmotion[]
  sessionsFrom    Session[] @relation("FromEmotion")
  sessionsTo      Session[] @relation("ToEmotion")
}

model Track {
  id          Int     @id @default(autoincrement())
  name        String
  length      Int
  track_href  String
  bpm         Int
  genreId     Int
  speechiness Int
  energy      Int

  genre       Genre   @relation(fields: [genreId], references: [id])
  sessions    SessionTrack[]
}

model Session {
  id            Int      @id @default(autoincrement())
  duration      Int
  userId        Int
  fromEmotionId Int
  toEmotionId   Int

  user        User     @relation(fields: [userId], references: [id])
  fromEmotion Emotion  @relation("FromEmotion", fields: [fromEmotionId], references: [id])
  toEmotion   Emotion  @relation("ToEmotion", fields: [toEmotionId], references: [id])
  phases      Phase[]
}

model SessionTrack {
  sessionId Int
  trackId   Int
  order Int

  session   Session @relation(fields: [sessionId], references: [id])
  track     Track   @relation(fields: [trackId], references: [id])

  @@id([sessionId, trackId])
}

model Phase {
  id              Int      @id @default(autoincrement())
  sessionId       Int
  phaseNumber     Int
  duration        Int
  startBpm        Int
  targetBpm       Int
  startEnergy     Int
  targetEnergy    Int
  startSpeechiness Int
  targetSpeechiness Int
  TracksCount Int
  session         Session  @relation(fields: [sessionId], references: [id])
  tracks          Track[]  @relation("PhaseTracks")
  genres          Genre[]  @relation("PhaseGenres")
}
